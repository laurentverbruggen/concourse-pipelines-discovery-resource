#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh
source $(dirname $0)/utils.sh

# for jq
PATH=/usr/local/bin:$PATH

payload=$TMPDIR/pipeline-discovery-resource-request

cat > $payload <&0

log "Configuring git credentials"
load_pubkey $payload
configure_git_ssl_verification $payload
configure_credentials $payload

log "Parsing payload" "$(cat $payload)"
uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
paths="$(jq -r '(.source.paths // ["."])[]' < $payload)" # those "'s are important
ignore_paths="$(jq -r '":!" + (.source.ignore_paths // [])[]' < $payload)" # these ones too
tag_filter=$(jq -r '.source.tag_filter // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
skip_ci_disabled=$(jq -r '.source.disable_ci_skip // false' < $payload)
config=$(jq -r '.source.config // "concourse.json"' < $payload)

ref=$(jq -r '.version.ref // ""' < $payload)

configure_git_global "${git_config_payload}"

destination=$TMPDIR/pipeline-discovery-resource-repo-cache

# if destination exists but branch changed then reclone the repository
if [ -d "$destination" ]; then
  cd "$destination"
  current_branch=$(git_current_branch)
  if [ "$branch" != "" -a "$branch" != "$current_branch" ]; then
    log "Removing $destination because branches don't match -> param: $branch, current: $current_branch"
    rm -rf "$destination"
  fi
fi

if [ -d "$destination" ]; then
  log "Destination exists, fetching now ($destination)"
  cd "$destination"
  git fetch

  # if config file does not exist or isn't readable we exit with failure
  if [ ! -r "$config" ]; then
    log "Missing concourse file: $config"
    exit 1
  fi

  # gather all files to validate for changes
  pipelineFiles=()
  pipelineFiles+=("$config")
  files=$(jq -c '.pipelines // [] | .[]' < "$config")
  if [ -n "$files" ]; then
    while read pipeline ; do
      pipelineFiles+=("$(echo "$pipeline" | jq -r '.config')")
    done <<< "$files"
  fi

  log "Verifying pipeline files..."
  # only expose changes (git reset FETCH_HEAD) when one of pipeline files contains changes
  current_branch=$(git_current_branch)
  for file in "${pipelineFiles[@]}"; do
    if [ -n "$(git diff origin/$current_branch -- $file)" ]; then
      log "Changes detected for $file"
      git reset --hard FETCH_HEAD
      break
    fi
  done
else
  log "Cloning repository $uri ($destination)"
  branchflag=""
  if [ -n "$branch" ]; then
    branchflag="--branch $branch"
  fi

  git clone --single-branch "$uri" $branchflag "$destination"
  cd "$destination"

  # if config file does not exist or isn't readable we exit with failure
  if [ ! -r "$config" ]; then
    log "Missing concourse file: $config"
    exit 1
  fi
fi

if [ -n "$ref" ] && git cat-file -e "$ref"; then
  init_commit=$(git rev-list --max-parents=0 HEAD)
  if [ "${ref}" = "${init_commit}" ]; then
    log_range="--reverse HEAD"
  else
    log_range="--reverse ${ref}~1..HEAD"
  fi
else
  log_range="-1"
fi

if [ "$paths" = "." ] && [ -z "$ignore_paths" ]; then
  paths_search=""
else
  paths_search="-- $paths $ignore_paths"
fi

ci_skip=""
if [ "$skip_ci_disabled" != "true" ]; then
  ci_skip="--grep \\[ci\\sskip\\] --grep \\[skip\\sci\\] --invert-grep"
fi

if [ -n "$tag_filter" ]; then
  {
    if [ -n "$ref" ]; then
      git tag --list "$tag_filter" --sort=creatordate --contains $ref
    else
      git tag --list "$tag_filter" --sort=creatordate | tail -1
    fi
  } | jq -R '.' | jq -s "map({ref: .})" >&3
else
  {
    git log $ci_skip --format='%H' --first-parent $log_range $paths_search
  } | jq -R '.' | jq -s "map({ref: .})" >&3
fi
